getwd()
getwd()
getwd()
install.packages("wordcloud")
?tm_map
??tm_map
getwd()
getwd()
install.packages("class")
getwd()
install.packages("randomForest")
install.packages("C50")
install.packages("rpart")
getwd()
getwd()
getwd()
r <- rnorm(20,0,1)
r
getwd()
getwd()
install.packages("testthat")
library("testthat", lib.loc="~/R/win-library/3.4")
devtools::install_github("MansMeg/markmyassignment")
library("testthat", lib.loc="~/R/win-library/3.4")
remove.packages("testthat", lib="~/R/win-library/3.4")
install.packages("C:/Users/b_masinde/Downloads/testthat_2.0.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/b_masinde/Downloads/cli_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/b_masinde/Downloads/testthat_2.0.0.tar.gz", repos = NULL, type = "source")
devtools::install_github("MansMeg/markmyassignment")
library("markmyassignment", lib.loc="~/R/win-library/3.4")
lab_path<-"https://raw.githubusercontent.com/STIMALiU/AdvRCourse/master/Labs/Tests/lab1.yml"
set_assignment(lab_path)
mark_my_assignment(mark_file="C:/Users/b_masinde/OneDrive/Documents/R projects/LABS/Computer Lab1.R")
mark_my_assignment(mark_my_file="C:/Users/b_masinde/OneDrive/Documents/R projects/LABS/Computer Lab1.R")
mark_my_assignment(mark_file="[C:/Users/b_masinde/OneDrive/Documents/R projects/LABS/Computer Lab1.R]")
mark_my_assignment(mark_file="C:/Users/b_masinde/OneDrive/Documents/R projects/LABS/Computer Lab1.R")
devtools::load_all()
getwd()
djikstra <- function(graph, init_node){
djikstra <- function(graph, init_node){
wiki_graph <-
data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
djikstra <- function(graph, init_node){
djikstra <- function(graph, init_node){
#First initial the distances
distances <- rep(1000, length(unique(graph[,1])))
distances
}
djikstra(wiki_graph)
djikstra <- function(graph, init_node){
#First initial the distances
distances <- rep(1000, length(unique(graph[,1])))
vertices <- unique(graph[,1])
vertices
}
djikstra(wiki_graph)
djikstra <- function(graph, init_node){
#First initial the distances
distances <- rep(1000, length(unique(graph[,1])))
vertices <- unique(graph[,1])
i <- init_node
while (i == init_node) {
distances[i] <-0
}
distances
}
djikstra(wiki_graph, init_node = 1)
djikstra <- function(graph, init_node){
#First initial the distances
distances <- rep(1000, length(unique(graph[,1])))
vertices <- unique(graph[,1])
i <- init_node
while (i == init_node) {
distances[i] <-0
i <- i+1
}
distances
}
djikstra(wiki_graph, init_node = 1)
?geom_spoke
library(ggplot2)
?geom_spoke
?colnames
devtools:install_github("[https://github.com/mariatreesa/Lab3R.git]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
library(devtools)
devtools:install_github("[https://github.com/mariatreesa/Lab3R.git]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
library("devtools")
devtools:install_github("[https://github.com/mariatreesa/Lab3R.git]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
devtools::install_github("[https://github.com/mariatreesa/Lab3R.git]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
devtools::install_github("[BMasinde]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
?devtools
devtools:install_github("[https://github.com/mariatreesa/Lab3R]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
devtools::install_github("[https://github.com/mariatreesa/Lab3R]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
devtools::install_github("[/mariatreesa/Lab3R]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
devtools::install_github("[mariatreesa/Lab3R]", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
devtools::install_github("[mariatreesa/Lab3R]", ref = "ff46790f", subdir="C:/Users/b_masinde/OneDrive/Documents/R projects/Package trial")
?plot_ly
?plotly
# Load needed packages
library("ggplot2")
library("gridExtra")
View(Xs)
data("iris")
exp <- Petal.Length ~ Sepal.Length + Sepal.Width
Xs <- model.matrix(exp, data = iris)
View(Xs)
QR <- qr(Xs)
View(QR)
Q <- qr.Q(QR)
View(Q)
R <- qr.R(QR)
View(R)
Q_t <- t(Q)
vars <- all.vars(exp)
View
y <- vars[1]
Y <- as.matrix(iris[ ,y])
Rhs <- Q_t %>% Y
Rhs <- Q_t %*% Y
View(Rhs)
Beta <- R/Rhs
Rhs_t <- t(Rhs)
rm(Rhs_t)
Rhs_i <- solve(Rhs)
R_i <- solve(R)
Beta <- Rhs %*% R_i
Beta <- Rhs * R_i
Beta <- Rhs/R
View(R)
View(Rhs)
Beta <- Rhs\R
Beta <- Rhs*R
Beta <- R %*% Rhs
Beta
Beta <- R * Rhs
b <- solve.qr(QR, Y)
b
vars
p <- lm(Petal.Length ~ Sepal.Length + Sepal.Width)
p <- lm(Petal.Length ~ Sepal.Length + Sepal.Width, data =iris)
p
c <- diag(R) %*% Rhs
c
linreg1 <- function(formula, data) {
# get the independent variables into a n*p matrix
X <- model.matrix(formula, data = data)
# extract all the variable names from the formula
vars <- all.vars(exp)
# get the first variables as independent
Y <- as.matrix(data[, vars[1]])
# use function qr to decompose X'X
QR <- qr(X)
R <- qr.R(QR)
R
}
linreg1(formula = Petal.Length ~ Sepal.Length + Sepal.Width, data = iris)
?solve
linreg1 <- function(formula, data) {
# get the independent variables into a n*p matrix
X <- model.matrix(formula, data = data)
# extract all the variable names from the formula
vars <- all.vars(exp)
# get the first variables as independent
Y <- as.matrix(data[, vars[1]])
# use function qr to decompose X'X
QR <- qr(X)
#R <- qr.R(QR)
beta <- solve(QR, Y)
beta
}
linreg1(formula = Petal.Length ~ Sepal.Length + Sepal.Width, data = iris)
linreg1 <- function(formula, data) {
# get the independent variables into a n*p matrix
X <- model.matrix(formula, data = data)
# extract all the variable names from the formula
vars <- all.vars(formula)
# get the first variables as independent
Y <- as.matrix(data[, vars[1]])
# use function qr to decompose X'X
QR <- qr(X)
#Use the function solve
beta <- solve(QR, Y)
beta
}
linreg1(formula = Petal.Length ~ Sepal.Length + Sepal.Width, data = iris)
?backsolve
linreg1 <- function(formula, data) {
# get the independent variables into a n*p matrix
X <- model.matrix(formula, data = data)
# extract all the variable names from the formula
vars <- all.vars(formula)
# get the first variables as independent
Y <- as.matrix(data[, vars[1]])
# use function qr to decompose X'X
QR <- qr(X)
#Use the function solve
beta <- solve(QR, Y)
# Get etimated y
y_hat <- X %*% beta
y_hat
}
linreg1(formula = Petal.Length ~ Sepal.Length + Sepal.Width, data = iris)
z <- lm(Species ~ Sepal.Width + Sepal.Length, data =iris)
?chol2inv
getwd()
shiny::runApp('~/Seminars/Lab 1_Group 1')
runApp('~/Seminars/Lab 1_Group 1')
runApp('~/Seminars/Lab 1_Group 1')
runApp('~/Seminars/Lab 1_Group 1')
runApp('~/Seminars/Lab 1_Group 1')
runApp('~/Seminars/Lab 1_Group 1')
runApp()
runApp('~/Seminars/Lab 1_Group 1')
runApp('~/Seminars/Lab 1_Group 1')
runApp('~/Seminars/Lab 1_Group 1')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(ggplot2)
library(gridExtra)
library(plotly)
library(shiny)
## Assignment 2.1
df <- read.table("SENIC.txt")
var_names <- c("id", "Length of Stay", "Age", "Infection Risk",
"Routine Culturing Ratio", "Routine Chest X-ray Ratio",
"Number of Beds", "Medical School Affiliation",
"Region", "Average Daily Census",
"Number of Nurses", "Available Facilities & Services")
## Assignment 2.2
outlier <- function(X){
quant <- quantile(X, probs = c(.25, .75))
out_max <- quant[2] + 1.5*(quant[2]-quant[1])
out_min <- quant[1] - 1.5*(quant[2]-quant[1])
return(which(X < out_min | X > out_max))
}
## Assignment 2.3
den <- density(df$V4)
p3 <- ggplot() +
geom_density(aes(df$V4), fill = "lightblue") +
geom_point(aes(x = df[outlier(df$V4),"V4"], y = 0), shape = 23, col = "red", fill = "red") +
geom_vline(xintercept = den$x[which.max(den$y)], col = "red") +
labs(title = "Infection Rates", x = "Infection Rate", y = "Density") +
theme_minimal()
p3
## Assignment 2.7
p7 <- plot_ly(data = df) %>%
add_histogram(x = ~V4,
histnorm = "probability",
name = "Density of Data") %>%
add_markers(x = df$V4[outlier(df$V4)],
y = 0,
marker = list(symbol = "diamond"),
name = "Outliers") %>%
layout(title = "Histogram of Infection Risk with Outliers",
xaxis = list(title = "Infection Risk"),
yaxis = list(title = "Density"))
p7
## Assignment 2.7
p7 <- df %>% plot_ly() %>%
add_histogram(x = ~V4,
histnorm = "probability",
name = "Density of Data") %>%
add_markers(x = df$V4[outlier(df$V4)],
y = 0,
marker = list(symbol = "diamond"),
name = "Outliers") %>%
layout(title = "Histogram of Infection Risk with Outliers",
xaxis = list(title = "Infection Risk"),
yaxis = list(title = "Density"))
p7
## Assignment 2.7
p7 <- df %>% plot_ly() %>%
add_histogram(x = ~V4,
histnorm = "probability",
name = "Density of Data") %>%
add_markers(x = df$V4[outlier(df$V4)],
y = 0,
marker = list(symbol = "diamond"),
name = "Outliers") %>%
layout(title = "Histogram of Infection Risk with Outliers",
xaxis = list(title = "Infection Risk"),
yaxis = list(title = "Density"))
p7
setwd(C:/Users/b_masinde/OneDrive/Documents/R projects/Exam/R Exam)
rm(list = ls())
sq <- function(x){
x^2
}
sq(2)
package.skeleton()
getwd()
?num
numeric
?numeric
build_mgb <- function(name, speed){
mgb <- list("weight"= numeric(), "time" = numeric(),
"status" = "in_service")
class(mgb) <- "build_mgb"
return(mgb)
}
build_mgb(name="Hopewell",speed=46)
?list
getwd()
setwd("C:/Users/b_masinde/OneDrive/Documents/R projects/Vis Lab 4")
prices_earnings <- read.table("prices-and-earnings.txt")
setwd("C:/Users/b_masinde/OneDrive/Documents/R projects/Vis Lab 4/4")
prices_earnings <- read.table("prices-and-earnings.txt")
prices_earnings <- read.table("prices-and-earnings.txt", sep = ",")
rm(list= ls())
prices_earnings <- read.table("prices-and-earnings.txt", sep = ",")
View(prices_earnings)
rm(list = ls())
prices_earnings <- read.table("prices-and-earnings.txt")
prices_earnings <- read.table("prices-and-earnings.txt", sep = "")
prices_earnings <- read.table("prices-and-earnings.txt", sep = "", header = TRUE)
?sep
?read.table
prices_earnings <- read.table("prices-and-earnings.txt", sep = " ",
dec = "." header = TRUE)
prices_earnings <- read.table("prices-and-earnings.txt", sep = " ",
dec = ".", header = TRUE)
prices_earnings <- read.table("prices-and-earnings.txt", sep = " ",
dec = ".", quote = "" header = TRUE)
prices_earnings <- read.table("prices-and-earnings.txt", sep = "\t",
dec = ".", quote = "" header = TRUE)
prices_earnings <- read.table("prices-and-earnings.txt", sep = "t",
dec = ".", quote = "" header = TRUE)
prices_earnings <- read.table("prices-and-earnings.txt", sep = "",
dec = ".", quote = "", header = TRUE)
prices_earnings <- read.delim("prices-and-earnings.txt")
View(prices_earnings)
# steps 4,5, 6 use euclidean distance
library(plotly)
# keep columns 1,2,5,6,7,9,10,16,17,18,19
prices_earnings2 <- prices_earnings[, c(1,2,5,6,7,9,10,16,17,18,19)]
View(prices_earnings2)
getwed()
getwd()
# question 2 scaling
prices_earnings_scaled <- scale(prices_earnings2)
# keep columns 1,2,5,6,7,9,10,16,17,18,19
prices_earnings2 <- prices_earnings[, c(1,2,5,6,7,9,10,16,17,18,19)]
rownames(prices_earnings2) <- prices_earnings2[[1]]
# question 2 scaling
prices_earnings_sc <- scale(prices_earnings2[,-1])
View(prices_earnings2)
View(prices_earnings_sc)
prices_earnings_sc %>%
plot_ly(x = ~colnames(prices_earnings_sc), y = rownames(prices_earnings_sc),
z = prices_earnings_sc, type = "heatmap", colors =colorRamp(c("yellow","red"))
)
# question 2 scaling
prices_earnings_sc <- scale(prices_earnings2[,-1])
as.data.frame(prices_earnings_sc)
# question 2 scaling
prices_earnings_sc <- scale(prices_earnings2[,-1])
prices_earnings_sc <- as.data.frame(prices_earnings_sc)
prices_earnings_sc %>%
plot_ly(x = ~colnames(prices_earnings_sc), y = rownames(prices_earnings_sc),
z = prices_earnings_sc, type = "heatmap", colors =colorRamp(c("yellow","red"))
)
prices_earnings_sc %>%
plot_ly(x = ~colnames(prices_earnings_sc), y = rownames(prices_earnings_sc),
z = ~prices_earnings_sc, type = "heatmap",
colors =colorRamp(c("yellow","red"))
)
